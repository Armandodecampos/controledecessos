<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Cadastros</title>
    <!-- Inclui a biblioteca Tailwind CSS para estilização -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilos para o modal de confirmação */
        .modal {
            display: none; /* Escondido por padrão */
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #1f2937;
            margin: auto;
            padding: 20px;
            border: 1px solid #4b5563;
            width: 80%;
            max-width: 400px;
            border-radius: 0.5rem;
            text-align: center;
        }
        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        /* Estilos da barra de rolagem para navegadores baseados em WebKit */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #374151;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background-color: #4b5563;
            border-radius: 10px;
            border: 2px solid #374151;
        }

        ::-webkit-scrollbar-thumb:hover {
            background-color: #5d6776;
        }

        /* Estilo específico para a barra de rolagem da área de liberações */
        #liberacao-content-area::-webkit-scrollbar {
            width: 60px;
        }

        /* Estilos para o contêiner de fundo embaçado */
        #background-blur-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background-image: url('https://cloudfront-us-east-1.images.arcpublishing.com/estadao/S7Q5XLVIGNE2PJHZJWX55QGCOE.jpg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            transition: filter 0.5s ease-in-out;
        }
        
        .liberacao-card-concluida {
            background-color: #1a2e24; /* Um verde escuro para indicar concluído */
        }
        
        .line-through-text {
            text-decoration: line-through;
        }
        
    </style>
</head>
<body class="bg-gray-900 text-gray-300 min-h-screen flex items-center justify-center p-4">

    <!-- Contêiner para o fundo embaçado -->
    <div id="background-blur-container"></div>

    <!-- Container do Título "Controle de Acessos" -->
    <div id="access-control-title" class="fixed top-0 left-0 w-full p-4 text-center bg-gray-900 z-50 transition-opacity duration-300">
        <h1 class="text-3xl font-bold text-gray-100">Controle de Acessos</h1>
    </div>

    <!-- Container principal que alterna entre o formulário de login e a página de conteúdo -->
    <div id="auth-container" class="w-full max-w-sm bg-gray-800 p-8 rounded-xl shadow-lg transition-all duration-300">
        <!-- Título do formulário -->
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-100" id="form-title">Faça Login</h1>
        </div>

        <!-- Formulário de Autenticação -->
        <form id="auth-form" class="space-y-4">
            <div>
                <label for="email" class="block text-sm font-medium text-gray-300">Email</label>
                <input type="email" id="email" name="email" required autocomplete="email" class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <label for="password" class="block text-sm font-medium text-gray-300">Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="password" name="password" required autocomplete="current-password" class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10">
                    <button type="button" id="toggle-password" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div id="confirm-password-container" class="hidden">
                <label for="confirm-password" class="block text-sm font-medium text-gray-300">Confirmar Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="confirm-password-signup" name="confirm-password" class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10" autocomplete="new-password">
                    <button type="button" id="toggle-confirm-password" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <button type="submit" id="submit-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Entrar</button>
            </div>
        </form>

        <!-- Mensagens de Erro ou Sucesso -->
        <div id="message" class="mt-4 text-center text-sm font-medium" style="display: none;"></div>
        
        <!-- Alternador entre login e cadastro, e botão de recuperação de senha -->
        <div class="mt-6 text-center text-sm space-y-2">
            <div id="forgot-password-container">
                <button id="forgot-password-btn" class="text-blue-400 hover:text-blue-300 transition duration-200 focus:outline-none block w-full">Esqueci minha senha</button>
            </div>
            <div>
                <button id="change-password-btn" class="text-blue-400 hover:text-blue-300 transition duration-200 focus:outline-none block w-full">Trocar senha</button>
            </div>
        </div>
    </div>

    <!-- Container para Troca de Senha -->
    <div id="password-change-container" class="hidden w-full max-w-sm bg-gray-800 p-8 rounded-xl shadow-lg transition-all duration-300">
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-100">Trocar Senha</h1>
        </div>
        <form id="password-change-form" class="space-y-4">
            <div>
                <label for="change-email" class="block text-sm font-medium text-gray-300">Email</label>
                <input type="email" id="change-email" required autocomplete="email" class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <label for="old-password" class="block text-sm font-medium text-gray-300">Senha Antiga</label>
                <input type="password" id="old-password" required class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <label for="new-password" class="block text-sm font-medium text-gray-300">Nova Senha</label>
                <input type="password" id="new-password" required class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <label for="confirm-new-password" class="block text-sm font-medium text-gray-300">Confirmar Nova Senha</label>
                <input type="password" id="confirm-new-password" required class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <button type="submit" id="change-submit-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Trocar Senha</button>
            </div>
        </form>
        <div id="change-message" class="mt-4 text-center text-sm font-medium" style="display: none;"></div>
        <div class="mt-6 text-center text-sm">
            <button id="back-to-login-btn" class="text-blue-400 hover:text-blue-300 transition duration-200 focus:outline-none">Voltar para o Login</button>
        </div>
    </div>

    <!-- Container para Solicitar Recuperação de Senha -->
    <div id="forgot-password-prompt-container" class="hidden w-full max-w-sm bg-gray-800 p-8 rounded-xl shadow-lg transition-all duration-300">
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-100">Recuperar Senha</h1>
            <p class="text-sm text-gray-400 mt-2">Digite seu e-mail para receber um link de recuperação.</p>
        </div>
        <form id="forgot-password-prompt-form" class="space-y-4">
            <div>
                <label for="recovery-email" class="block text-sm font-medium text-gray-300">Email</label>
                <input type="email" id="recovery-email" required autocomplete="email" class="mt-1 block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
            </div>
            <div>
                <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Enviar Link</button>
            </div>
        </form>
        <div id="recovery-message" class="mt-4 text-center text-sm font-medium" style="display: none;"></div>
        <div class="mt-6 text-center text-sm">
            <button id="back-to-login-from-recovery-btn" class="text-blue-400 hover:text-blue-300 transition duration-200 focus:outline-none">Voltar para o Login</button>
        </div>
    </div>

    <!-- Container para Recuperação de Senha -->
    <div id="password-recovery-container" class="hidden w-full max-w-sm bg-gray-800 p-8 rounded-xl shadow-lg transition-all duration-300">
        <div class="text-center mb-6">
            <h1 class="text-3xl font-bold text-gray-100">Redefinir Senha</h1>
        </div>
        <form id="password-recovery-form" class="space-y-4">
            <div>
                <label for="new-password-recovery" class="block text-sm font-medium text-gray-300">Nova Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="new-password-recovery" required class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10">
                    <button type="button" id="toggle-new-password" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <label for="confirm-password-recovery" class="block text-sm font-medium text-gray-300">Confirmar Nova Senha</label>
                <div class="relative mt-1">
                    <input type="password" id="confirm-password-recovery" required class="block w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200 pr-10">
                    <button type="button" id="toggle-confirm-recovery" class="absolute inset-y-0 right-0 px-3 flex items-center text-gray-400 hover:text-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
            <div>
                <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Salvar Nova Senha</button>
            </div>
        </form>
    </div>

    <!-- Página de Liberação -->
    <div id="liberacao-page" class="hidden w-full h-screen">
        <!-- Barra de navegação fixa no topo -->
        <div id="liberacao-top-bar" class="fixed top-0 left-0 w-full bg-gray-800 p-4 shadow-lg z-50 flex flex-wrap justify-start items-center space-x-4 space-y-2 sm:space-y-0">
            
            <!-- Botões de Filtro -->
            <button id="filter-my-liberacoes" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-gray-700 hover:bg-gray-600 transition duration-200">Minhas liberações</button>
            <button id="filter-all-liberacoes" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 transition duration-200">Todas liberações</button>
            
             <!-- Barra de pesquisa -->
            <div class="mt-2 sm:mt-0 flex-grow flex items-center relative">
                <input type="text" id="search-input" placeholder="Pesquisar..." class="w-full px-4 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                <button id="clear-search" class="absolute right-2 text-gray-400 hover:text-gray-200">
                   <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                     <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                   </svg>
                </button>
            </div>

            <!-- Campo de data visível para o calendário -->
            <button id="open-calendar-btn" class="p-2 rounded-lg shadow-sm text-white bg-gray-700 hover:bg-gray-600 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
            </button>
            <input type="date" id="filter-date" class="hidden">

            <!-- Cabeçalho de data/filtro fixo -->
            <div id="liberacao-header-fixed" class="text-white text-lg font-bold"></div>

            <!-- Botão "Nova liberação" -->
            <button id="btn-add-liberacao" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-emerald-500 hover:bg-emerald-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition duration-200">Nova liberação</button>
            
            <!-- Botão Sair -->
             <button id="sign-out-liberacao" class="py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-200">Sair</button>
            
        </div>
        
        <!-- Formulário de Adicionar/Editar Liberação -->
        <form id="add-liberacao-form" class="fixed inset-0 hidden items-center justify-center z-[50] bg-black bg-opacity-50">
            <div class="w-full max-w-lg bg-gray-700 p-6 rounded-lg shadow-md mt-16 space-y-4 max-h-[80vh] overflow-y-auto">
                <h3 id="form-subtitle" class="text-lg font-bold text-gray-100">Adicionar Liberação</h3>
                
                <!-- Título para todos os campos de nome -->
                <div>
                    <label for="nomes-container" class="block text-sm font-medium text-gray-300">Nome</label>
                    <div id="nomes-container" class="space-y-2">
                        <!-- O primeiro campo de nome será adicionado aqui pelo JS -->
                    </div>
                </div>

                <div class="flex justify-end">
                    <button type="button" id="add-nome-btn" class="p-2 rounded-full text-white bg-blue-600 hover:bg-blue-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
                <div>
                    <label for="periodo_inicio" class="block text-sm font-medium text-gray-300">Período de Início</label>
                    <input type="date" id="periodo_inicio" name="periodo_inicio" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                </div>
                <div>
                    <label for="periodo_fim" class="block text-sm font-medium text-gray-300">Período de Fim</label>
                    <input type="date" id="periodo_fim" name="periodo_fim" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                </div>
                <div class="flex items-center">
                    <input type="checkbox" id="permanente" name="permanente" class="h-4 w-4 text-blue-600 border-gray-300 rounded">
                    <label for="permanente" class="ml-2 block text-sm text-gray-300">Liberação Permanente</label>
                </div>
                 <div class="flex items-center">
                    <input type="checkbox" id="importante" name="importante" class="h-4 w-4 text-blue-600 border-gray-300 rounded">
                    <label for="importante" class="ml-2 block text-sm text-gray-300">Marcar como Importante</label>
                </div>
                <div id="concluida-container" class="hidden flex items-center">
                    <input type="checkbox" id="concluida-edit" name="concluida-edit" class="h-4 w-4 text-emerald-600 border-gray-300 rounded">
                    <label for="concluida-edit" class="ml-2 block text-sm text-gray-300">Marcar como Concluída</label>
                </div>
                <div>
                    <label for="observacao" class="block text-sm font-medium text-gray-300">Observação</label>
                    <textarea id="observacao" name="observacao" rows="6" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200"></textarea>
                </div>
                <div>
                     <label for="arquivo" class="block text-sm font-medium text-gray-300">Anexar Arquivo</label>
                     <input type="file" id="arquivo" name="arquivo" class="mt-1 block w-full text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                </div>
                <div class="flex space-x-4">
                    <button type="submit" id="form-submit-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-200">Salvar Liberação</button>
                    <button type="button" id="form-cancel-btn" class="w-full flex justify-center py-2 px-4 border border-gray-500 rounded-lg shadow-sm text-sm font-medium text-gray-200 bg-gray-600 hover:bg-gray-500 transition duration-200">Cancelar</button>
                </div>
            </div>
        </form>
        
        <div id="liberacao-content-area" class="fixed left-0 right-0 bottom-0 bg-gray-800 p-8 overflow-y-auto">
            <div id="liberacoes-list" class="space-y-4">
                <!-- Lista de liberações será renderizada aqui -->
            </div>
        </div>
    </div>

    <!-- Modal de Confirmação -->
    <div id="confirmation-modal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-100 mb-4">Confirmar Exclusão</h3>
            <p class="text-gray-300">Tem certeza de que deseja excluir esta liberação permanentemente?</p>
            <div class="modal-buttons">
                <button id="confirm-delete-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-200">Sim, Excluir</button>
                <button id="cancel-delete-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-gray-200 bg-gray-600 hover:bg-gray-500 transition duration-200">Cancelar</button>
            </div>
        </div>
    </div>

    <!-- Modal de Mensagem de Erro -->
    <div id="message-modal" class="modal">
        <div class="modal-content relative">
            <button id="close-message-modal" class="absolute top-2 right-2 text-gray-400 hover:text-gray-100 transition duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h3 class="text-lg font-bold text-gray-100 mb-4">Atenção!</h3>
            <p id="modal-message" class="text-gray-300"></p>
        </div>
    </div>

    <!-- Modal de Calendário Personalizado -->
    <div id="custom-calendar-modal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-100 mb-4">Selecionar Data</h3>
            <input type="date" id="custom-date-input" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-gray-700 hover:bg-gray-600 transition duration-200 w-full mb-4">
            <div class="modal-buttons">
                <button id="select-today-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition duration-200">Hoje</button>
                <button id="select-all-dates-btn" class="py-2 px-4 rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition duration-200">Todas as Datas</button>
            </div>
        </div>
    </div>


    <!-- Script do Supabase (substitua a versão se necessário) -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>

    <!-- JavaScript para a lógica do aplicativo -->
    <script type="module">
        // **IMPORTANTE**: Substitua 'VOTSUF_URL' e 'VOTSUF_ANON_KEY' pelas suas credenciais do projeto Supabase.
        const supabaseUrl = 'https://rztrygjczjqeqqldiqxa.supabase.co'
        const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ6dHJ5Z2pjempxZXFxbGRpcXhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwNDgyMzIsImV4cCI6MjA3MzYyNDIzMn0.s7QiJWo6SPZRmN1bW1vPyhEis0xO1voNh0GFWPrTLtU'
        
        // Inicializa o cliente Supabase
        const supabase = window.supabase.createClient(supabaseUrl, supabaseAnonKey);

        // Seleção de elementos do DOM
        const accessControlTitle = document.getElementById('access-control-title');
        const authContainer = document.getElementById('auth-container');
        const passwordRecoveryContainer = document.getElementById('password-recovery-container');
        const passwordRecoveryForm = document.getElementById('password-recovery-form');
        const newPasswordInput = document.getElementById('new-password-recovery');
        const confirmPasswordInput = document.getElementById('confirm-password-recovery');
        const authForm = document.getElementById('auth-form');
        const formTitle = document.getElementById('form-title');
        const submitBtn = document.getElementById('submit-btn');
        const userEmailElem = document.getElementById('user-email');
        const signOutBtn = document.getElementById('sign-out');
        const messageElem = document.getElementById('message');
        const forgotPasswordBtn = document.getElementById('forgot-password-btn');
        const forgotPasswordContainer = document.getElementById('forgot-password-container');
        const liberacaoPage = document.getElementById('liberacao-page');
        const btnAddLiberacao = document.getElementById('btn-add-liberacao');
        const addLiberacaoForm = document.getElementById('add-liberacao-form');
        const liberacoesList = document.getElementById('liberacoes-list');
        const liberacaoHeaderFixed = document.getElementById('liberacao-header-fixed');
        const permanenteCheckbox = document.getElementById('permanente');
        const importanteCheckbox = document.getElementById('importante');
        const concluidaEditCheckbox = document.getElementById('concluida-edit');
        const concluidaContainer = document.getElementById('concluida-container');
        const periodoInicioInput = document.getElementById('periodo_inicio');
        const periodoFimInput = document.getElementById('periodo_fim');
        const formSubtitle = document.getElementById('form-subtitle');
        const formSubmitBtn = document.getElementById('form-submit-btn');
        const formCancelBtn = document.getElementById('form-cancel-btn');
        const nomesContainer = document.getElementById('nomes-container');
        const addNomeBtn = document.getElementById('add-nome-btn');
        const backgroundBlurContainer = document.getElementById('background-blur-container');
        
        // Elementos da troca de senha
        const changePasswordBtn = document.getElementById('change-password-btn');
        const passwordChangeContainer = document.getElementById('password-change-container');
        const passwordChangeForm = document.getElementById('password-change-form');
        const backToLoginBtn = document.getElementById('back-to-login-btn');
        const changeMessageElem = document.getElementById('change-message');
        const forgotPasswordPromptContainer = document.getElementById('forgot-password-prompt-container');
        const forgotPasswordPromptForm = document.getElementById('forgot-password-prompt-form');
        const backToLoginFromRecoveryBtn = document.getElementById('back-to-login-from-recovery-btn');
        const recoveryMessageElem = document.getElementById('recovery-message');

        // Novos elementos para os ícones de olho
        const togglePasswordBtn = document.getElementById('toggle-password');
        const toggleConfirmPasswordBtn = document.getElementById('toggle-confirm-password');
        const toggleNewPasswordBtn = document.getElementById('toggle-new-password');
        const toggleConfirmRecoveryBtn = document.getElementById('toggle-confirm-recovery');
        
        // Campos de senha
        const passwordInput = document.getElementById('password');
        const confirmPasswordSignupInput = document.getElementById('confirm-password-signup');

        // Modal elements
        const confirmationModal = document.getElementById('confirmation-modal');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
        const messageModal = document.getElementById('message-modal');
        const modalMessage = document.getElementById('modal-message');
        const closeMessageModalBtn = document.getElementById('close-message-modal');

        const customCalendarModal = document.getElementById('custom-calendar-modal');
        const customDateInput = document.getElementById('custom-date-input');
        const selectTodayBtn = document.getElementById('select-today-btn');
        const selectAllDatesBtn = document.getElementById('select-all-dates-btn');
        
        // Novos elementos de filtro
        const filterDateInput = document.getElementById('filter-date');
        const openCalendarBtn = document.getElementById('open-calendar-btn');
        const searchInput = document.getElementById('search-input');
        const clearSearchBtn = document.getElementById('clear-search');
        const filterMyLiberacoesBtn = document.getElementById('filter-my-liberacoes');
        const filterAllLiberacoesBtn = document.getElementById('filter-all-liberacoes');
        
        // Botão de sair da barra de navegação
        const signOutLiberacaoBtn = document.getElementById('sign-out-liberacao');
        
        const liberacaoTopBar = document.getElementById('liberacao-top-bar');
        const liberacaoContentArea = document.getElementById('liberacao-content-area');
        // Novo elemento para o anexo
        const arquivoInput = document.getElementById('arquivo');

        let currentSession = null;
        let liberacaoToDeleteId = null;
        let liberacaoToEdit = null;
        let currentFilterType = 'date';
        let currentFilterDate = null;
        let liberacaoOwnerFilter = 'all'; // 'all' or 'my'
        let searchTimeout;
        const POLLING_INTERVAL = 1000; // 1 segundo de sondagem
        let isChangingPassword = false;

        // Sondagem para atualização de dados
        setInterval(() => {
            if (currentSession && liberacaoPage.style.display !== 'none') {
                fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
            }
        }, POLLING_INTERVAL);

        function adjustLiberacaoLayout() {
            if (liberacaoTopBar && liberacaoContentArea) {
                const topBarHeight = liberacaoTopBar.offsetHeight;
                liberacaoContentArea.style.top = `${topBarHeight}px`;
            }
        }

        window.addEventListener('resize', adjustLiberacaoLayout);


        // Função para normalizar strings, removendo acentos e convertendo para minúsculas
        function normalizeText(text) {
            return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        }
        
        // Função para adicionar um novo campo de nome
        function addNameInput(value = '', isRemovable = true) {
            const newNameDiv = document.createElement('div');
            newNameDiv.className = 'flex items-center space-x-2';
            newNameDiv.innerHTML = `
                <input type="text" name="nome" required value="${value}" class="mt-1 block w-full px-4 py-2 bg-gray-600 text-gray-100 border border-gray-500 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-200">
                ${isRemovable ? `
                <button type="button" class="p-2 rounded-full text-red-400 hover:text-red-500 remove-name-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm6 0a1 1 0 11-2 0v6a1 1 0 112 0V8z" clip-rule="evenodd" />
                    </svg>
                </button>
                ` : ''}
            `;
            if(nomesContainer) {
                nomesContainer.appendChild(newNameDiv);
            }
        }
        
        // Função para exibir mensagens (geralmente usada para notificações 'toast')
        function showMessage(text, isError = false) {
            const toast = document.createElement('div');
            toast.textContent = text;
            toast.className = `fixed bottom-5 right-5 p-4 rounded-lg shadow-lg text-white ${isError ? 'bg-red-600' : 'bg-green-600'}`;
            toast.style.zIndex = '2000'; // Garante que fique por cima de outros elementos
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Função para exibir mensagens na tela de solicitação de recuperação
        function showRecoveryMessage(text, isError = false) {
            if (recoveryMessageElem) {
                recoveryMessageElem.textContent = text;
                recoveryMessageElem.style.display = text ? 'block' : 'none';
                recoveryMessageElem.className = `mt-4 text-center text-sm font-medium ${isError ? 'text-red-500' : 'text-green-500'}`;
            }
        }

        // Função para exibir mensagens na tela de troca de senha
        function showChangeMessage(text, isError = false) {
            if (changeMessageElem) {
                changeMessageElem.textContent = text;
                changeMessageElem.style.display = text ? 'block' : 'none';
                changeMessageElem.className = `mt-4 text-center text-sm font-medium ${isError ? 'text-red-500' : 'text-green-500'}`;
            }
        }

        // Função para exibir mensagens de validação
        function showValidationMessage(text) {
            if (modalMessage) {
                modalMessage.textContent = text || 'Por favor, preencha todos os campos obrigatórios.';
                messageModal.style.display = 'flex';
            }
        }
        if (closeMessageModalBtn) {
            closeMessageModalBtn.addEventListener('click', () => {
                messageModal.style.display = 'none';
            });
        }

        // Lógica para lidar com o envio do formulário de autenticação
        if (authForm) {
            authForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const email = document.getElementById('email').value;
                const password = passwordInput.value;
                
                // Lógica de login
                const { data, error } = await supabase.auth.signInWithPassword({ email, password });
                if (error) {
                    showMessage(error.message, true);
                } else {
                    showMessage('Login bem-sucedido!');
                    console.log('Dados do usuário:', data);
                }
            });
        }
        
        // Lógica para mostrar o formulário de troca de senha
        if (changePasswordBtn) {
            changePasswordBtn.addEventListener('click', () => {
                authContainer.style.display = 'none';
                passwordChangeContainer.style.display = 'block';
            });
        }

        // Lógica para voltar para o login
        if (backToLoginBtn) {
            backToLoginBtn.addEventListener('click', () => {
                passwordChangeContainer.style.display = 'none';
                authContainer.style.display = 'block';
                showChangeMessage(''); // Limpa a mensagem
            });
        }

        // Lógica para o formulário de troca de senha
        if (passwordChangeForm) {
            passwordChangeForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const email = document.getElementById('change-email').value;
                const oldPassword = document.getElementById('old-password').value;
                const newPassword = document.getElementById('new-password').value;
                const confirmNewPassword = document.getElementById('confirm-new-password').value;

                if (newPassword !== confirmNewPassword) {
                    showChangeMessage('As novas senhas não coincidem.', true);
                    return;
                }

                isChangingPassword = true;

                // 1. Autenticar com a senha antiga para verificar o usuário
                const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
                    email,
                    password: oldPassword,
                });

                if (signInError) {
                    showChangeMessage('Email ou senha antiga incorretos.', true);
                    isChangingPassword = false;
                    return;
                }

                // 2. Se a autenticação for bem-sucedida, atualize a senha
                const { data: updateData, error: updateError } = await supabase.auth.updateUser({
                    password: newPassword
                });

                if (updateError) {
                    showChangeMessage('Erro ao atualizar a senha: ' + updateError.message, true);
                    isChangingPassword = false;
                } else {
                    showChangeMessage('Senha alterada com sucesso! Você será deslogado.');
                    // 3. Deslogar o usuário para forçar o login com a nova senha
                    setTimeout(async () => {
                        await supabase.auth.signOut();
                        isChangingPassword = false;
                    }, 2000);
                }
            });
        }

        // Lógica de redefinição de senha
        if (forgotPasswordBtn) {
            forgotPasswordBtn.addEventListener('click', () => {
                authContainer.style.display = 'none';
                forgotPasswordPromptContainer.style.display = 'block';
                showMessage(''); // Limpa a mensagem do formulário de login
            });
        }

        if (backToLoginFromRecoveryBtn) {
            backToLoginFromRecoveryBtn.addEventListener('click', () => {
                forgotPasswordPromptContainer.style.display = 'none';
                authContainer.style.display = 'block';
                showRecoveryMessage('');
            });
        }

        if (forgotPasswordPromptForm) {
            forgotPasswordPromptForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const email = document.getElementById('recovery-email').value;
                if (!email) {
                    showRecoveryMessage('Por favor, insira seu email.', true);
                    return;
                }

                const { data, error } = await supabase.auth.resetPasswordForEmail(email, { redirectTo: window.location.origin });
                if (error) {
                    showRecoveryMessage(error.message, true);
                } else {
                    showRecoveryMessage('Verifique seu e-mail para o link de redefinição de senha.');
                }
            });
        }
        
        // Lógica para lidar com o formulário de recuperação de senha
        if (passwordRecoveryForm) {
            passwordRecoveryForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const newPassword = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;

                if (newPassword !== confirmPassword) {
                    modalMessage.textContent = 'As senhas não coincidem. Tente novamente.';
                    messageModal.style.display = 'flex';
                    return;
                }

                const { data, error } = await supabase.auth.updateUser({
                    password: newPassword
                });

                if (error) {
                    modalMessage.textContent = error.message;
                    messageModal.style.display = 'flex';
                } else {
                    modalMessage.textContent = 'Senha atualizada com sucesso! Você já pode entrar.';
                    messageModal.style.display = 'flex';
                    setTimeout(() => {
                        window.location.hash = ''; // Limpa o hash da URL
                        window.location.reload(); // Recarrega a página para o estado inicial
                    }, 2000);
                }
            });
        }
        

        // Lógica para alternar a visibilidade da senha
        function setupPasswordToggle(inputElem, buttonElem) {
            if (buttonElem) {
                buttonElem.addEventListener('click', () => {
                    const type = inputElem.type === 'password' ? 'text' : 'password';
                    inputElem.type = type;
                    
                    // Altera o ícone do olho
                    if (type === 'password') {
                        buttonElem.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>`;
                    } else {
                        buttonElem.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-14-14z" clip-rule="evenodd" />
                            <path d="M10 4.5C6.703 4.5 3.868 6.643 2.54 9.516l-.078.184.078.184C3.868 13.357 6.703 15.5 10 15.5c3.297 0 6.132-2.143 7.46-4.984l.078-.184-.078-.184C16.132 6.643 13.297 4.5 10 4.5zM10 8a2 2 0 100 4 2 2 0 000-4z" />
                        </svg>`;
                    }
                });
            }
        }
        setupPasswordToggle(passwordInput, togglePasswordBtn);
        setupPasswordToggle(confirmPasswordSignupInput, toggleConfirmPasswordBtn);
        setupPasswordToggle(newPasswordInput, toggleNewPasswordBtn);
        setupPasswordToggle(confirmPasswordInput, toggleConfirmRecoveryBtn);

        //Lógica para deslogar
        if (signOutLiberacaoBtn) {
            signOutLiberacaoBtn.addEventListener('click', async () => {
                const { error } = await supabase.auth.signOut();
                if (error) {
                    showMessage('Erro ao sair.', true);
                }
                window.location.reload();
            });
        }

        // Lógica para mostrar/esconder o formulário de adicionar liberação
        if (btnAddLiberacao) {
            btnAddLiberacao.addEventListener('click', () => {
                const today = new Date().toISOString().split('T')[0];
                periodoInicioInput.value = today;
                periodoFimInput.value = today;

                addLiberacaoForm.style.display = 'flex';
                formSubtitle.textContent = 'Adicionar Liberação';
                formSubmitBtn.textContent = 'Salvar Liberação';
                concluidaContainer.style.display = 'none';
                addLiberacaoForm.reset();
                nomesContainer.innerHTML = '';
                addNameInput('', false); // Adiciona o primeiro campo de nome
                liberacaoToEdit = null;
                 // Redefine a data para hoje após resetar o formulário
                periodoInicioInput.value = today;
                periodoFimInput.value = today;
            });
        }

        // Lógica para cancelar a edição
        if (formCancelBtn) {
            formCancelBtn.addEventListener('click', () => {
                addLiberacaoForm.style.display = 'none';
                addLiberacaoForm.reset();
                liberacaoToEdit = null;
            });
        }

        // Lógica para habilitar/desabilitar campos de data
        if (permanenteCheckbox) {
            permanenteCheckbox.addEventListener('change', (event) => {
                const isChecked = event.target.checked;
                periodoInicioInput.disabled = isChecked;
                periodoFimInput.disabled = isChecked;
                if (isChecked) {
                    periodoInicioInput.value = '';
                    periodoFimInput.value = '';
                }
            });
        }

        // Lógica para lidar com o envio do formulário de liberação
        if (addLiberacaoForm) {
            addLiberacaoForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // Coleta todos os nomes do formulário
                const nomesInputs = nomesContainer.querySelectorAll('input[name="nome"]');
                const nomes = Array.from(nomesInputs).map(input => input.value).filter(nome => nome.trim() !== '');
                
                if (nomes.length === 0) {
                     showValidationMessage('Por favor, insira pelo menos um nome.');
                     return;
                }

                const permanente = document.getElementById('permanente').checked;
                const importante = document.getElementById('importante').checked;
                const observacao = document.getElementById('observacao').value;
                const file = arquivoInput.files[0];
                
                let periodo_inicio = null;
                let periodo_fim = null;

                if (!permanente) {
                    const inicioValue = periodoInicioInput.value;
                    const fimValue = periodoFimInput.value;

                    if (!inicioValue || !fimValue) {
                        showValidationMessage('Por favor, preencha o período de início e fim ou marque a opção "Liberação Permanente".');
                        return;
                    }
                    
                    const today = new Date();
                    today.setHours(0,0,0,0); // Normaliza para o início do dia
                    const startDate = new Date(inicioValue);
                    startDate.setMinutes(startDate.getMinutes() + startDate.getTimezoneOffset()); // Ajusta para UTC
                    
                    if (startDate < today) {
                        showValidationMessage('Não é possível criar uma liberação para uma data anterior à data atual.');
                        return;
                    }
                    
                    if (fimValue < inicioValue) {
                        showValidationMessage('O "Período de Fim" não pode ser anterior ao "Período de Início".');
                        return;
                    }
                    
                    periodo_inicio = inicioValue;
                    periodo_fim = fimValue;
                }
                
                let filePath = null;

                if (file) {
                     const fileName = `${Date.now()}-${file.name}`;
                     filePath = `${currentSession.user.id}/${fileName}`;

                     const { error: uploadError } = await supabase
                         .storage
                         .from('liberacoes_anexos')
                         .upload(filePath, file);

                     if (uploadError) {
                         console.error('Erro ao fazer upload do arquivo:', uploadError);
                         showValidationMessage('Erro ao fazer upload do arquivo.');
                         return;
                     }
                }
                
                let concluida = concluidaEditCheckbox.checked;
                let concluidaPor = concluidaEditCheckbox.checked ? currentSession.user.email : null;
                let concluidaEm = concluidaEditCheckbox.checked ? new Date().toISOString() : null;

                if (liberacaoToEdit && liberacaoToEdit.concluida && !concluidaEditCheckbox.checked) {
                    // Desmarcar concluída na edição
                    concluida = false;
                    concluidaPor = null;
                    concluidaEm = null;
                }

                const payload = { 
                    nome: nomes, 
                    permanente, 
                    importante, 
                    periodo_inicio, 
                    periodo_fim, 
                    observacao, 
                    criador_nome: currentSession.user.email,
                    user_id: currentSession.user.id,
                    concluida: concluida,
                    concluida_por: concluidaPor,
                    concluida_em: concluidaEm,
                    anexo_url: filePath ? supabase.storage.from('liberacoes_anexos').getPublicUrl(filePath).data.publicUrl : null
                };

                if (liberacaoToEdit) {
                    const { data, error } = await supabase
                        .from('liberacoes')
                        .update(payload)
                        .eq('id', liberacaoToEdit.id);

                    if (error) {
                        console.error('Erro ao editar a liberação:', error);
                        showValidationMessage('Erro ao editar a liberação.');
                    } else {
                        showMessage('Liberação editada com sucesso!');
                        liberacaoToEdit = null; // Limpa o estado de edição
                        addLiberacaoForm.style.display = 'none';
                        addLiberacaoForm.reset();
                        fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
                    }
                } else {
                    const { data, error } = await supabase
                        .from('liberacoes')
                        .insert([payload]);

                    if (error) {
                        console.error('Erro ao salvar a liberação:', error);
                        showValidationMessage('Erro ao salvar a liberação.');
                    } else {
                        showMessage('Liberação adicionada com sucesso!');
                        addLiberacaoForm.reset();
                        addLiberacaoForm.style.display = 'none';
                        fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value); // Atualiza a lista
                    }
                }
            });
        }
        
        // Função para editar uma liberação
        async function editLiberacao(id) {
            const { data, error } = await supabase
                .from('liberacoes')
                .select('*')
                .eq('id', id)
                .single();

            if (error) {
                console.error('Erro ao buscar a liberação para edição:', error);
                return;
            }

            liberacaoToEdit = data;
            
            // Preenche o formulário com os dados da liberação
            nomesContainer.innerHTML = ''; // Limpa os campos de nome existentes
            
            // Corrige o tipo de dado para garantir que seja um array
            let nomesDoBanco = liberacaoToEdit.nome;
            if (typeof nomesDoBanco === 'string' && nomesDoBanco.startsWith('[') && nomesDoBanco.endsWith(']')) {
                try {
                    nomesDoBanco = JSON.parse(nomesDoBanco);
                } catch (e) {
                    console.error('Erro ao converter nome para array:', e);
                    nomesDoBanco = [nomesDoBanco]; // Fallback para um array de um único item
                }
            }
            
            if (nomesDoBanco && nomesDoBanco.length > 0) {
                // Adiciona o primeiro nome sem o botão de remover
                addNameInput(nomesDoBanco[0], false);
                // Adiciona os nomes restantes com o botão de remover
                for (let i = 1; i < nomesDoBanco.length; i++) {
                    addNameInput(nomesDoBanco[i]);
                }
            } else {
                // Caso a lista de nomes esteja vazia
                addNameInput('', false);
            }

            document.getElementById('permanente').checked = liberacaoToEdit.permanente;
            document.getElementById('importante').checked = liberacaoToEdit.importante;
            concluidaEditCheckbox.checked = liberacaoToEdit.concluida;
            document.getElementById('observacao').value = liberacaoToEdit.observacao;
            concluidaContainer.style.display = 'flex';

            // Habilita/desabilita os campos de data
            if (permanenteCheckbox) {
                permanenteCheckbox.dispatchEvent(new Event('change'));
            }
            if (!liberacaoToEdit.permanente) {
                if (periodoInicioInput) periodoInicioInput.value = liberacaoToEdit.periodo_inicio;
                if (periodoFimInput) periodoFimInput.value = liberacaoToEdit.periodo_fim;
            }

            if(formSubtitle) formSubtitle.textContent = 'Editar Liberação';
            if(formSubmitBtn) formSubmitBtn.textContent = 'Salvar Edição';
            if(addLiberacaoForm) addLiberacaoForm.style.display = 'flex';
        }


        // Lógica para excluir uma liberação
        function deleteLiberacao(id) {
            liberacaoToDeleteId = id;
            if (confirmationModal) {
                 confirmationModal.style.display = 'flex';
            }
        }

        // Lógica para o botão de confirmação do modal de exclusão
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async () => {
                if (confirmationModal) confirmationModal.style.display = 'none';
                if (!liberacaoToDeleteId) return;

                const { data, error } = await supabase
                    .from('liberacoes')
                    .delete()
                    .eq('id', liberacaoToDeleteId);
                
                if (error) {
                    console.error('Erro ao excluir a liberação:', error);
                    showMessage('Erro ao excluir a liberação.', true);
                } else {
                    showMessage('Liberação excluída permanentemente!');
                    fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
                }

                liberacaoToDeleteId = null;
            });
        }

        // Lógica para o botão de cancelar do modal
        if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', () => {
                if (confirmationModal) confirmationModal.style.display = 'none';
                liberacaoToDeleteId = null;
            });
        }
        
        // Função para marcar uma liberação como concluída
        async function marcarComoConcluida(id) {
            const { data, error } = await supabase
                .from('liberacoes')
                .update({ 
                    concluida: true,
                    concluida_por: currentSession.user.email,
                    concluida_em: new Date().toISOString()
                })
                .eq('id', id);

            if (error) {
                console.error('Erro ao marcar como concluída:', error);
                showValidationMessage('Erro ao marcar como concluída.');
            } else {
                showMessage('Liberação marcada como concluída!');
                fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
            }
        }
        
        // Função para desmarcar uma liberação como concluída
        async function desmarcarComoConcluida(id) {
            const { data, error } = await supabase
                .from('liberacoes')
                .update({
                    concluida: false,
                    concluida_por: null,
                    concluida_em: null
                })
                .eq('id', id);

            if (error) {
                console.error('Erro ao desmarcar como concluída:', error);
                showValidationMessage('Erro ao desmarcar como concluída.');
            } else {
                showMessage('Liberação desmarcada como concluída!');
                fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
            }
        }
        
        // Função utilitária para formatar texto com quebras de linha e links
        function formatText(text) {
          if (!text) return '';
          let formattedText = text.replace(/\n/g, '<br>');
          const urlRegex = /(https?:\/\/[^\s]+)/g;
          formattedText = formattedText.replace(urlRegex, (url) => {
            return `<a href="${url}" target="_blank" class="text-blue-400 hover:underline">${url}</a>`;
          });
          return formattedText;
        }

        // Função para destacar o texto da pesquisa
        function highlightText(text, searchTerm) {
            if (!searchTerm || !searchTerm.trim() || !text) {
                return text;
            }
            const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const parts = text.split(new RegExp(`(<[^>]+>)`, 'g'));
            return parts.map(part => {
                if (part.startsWith('<') && part.endsWith('>')) {
                    return part;
                }
                const regex = new RegExp(`(${escapedSearchTerm})`, 'gi');
                return part.replace(regex, `<mark class="bg-yellow-400 text-black rounded px-1">$1</mark>`);
            }).join('');
        }
        
        function updateFilterButtons(selectedFilter) {
            const openCalendarBtn = document.getElementById('open-calendar-btn');
            
            if (selectedFilter === 'date') {
                if (openCalendarBtn) openCalendarBtn.classList.remove('bg-gray-700');
                if (openCalendarBtn) openCalendarBtn.classList.add('bg-blue-600');
            } else if (selectedFilter === 'all') {
                if (openCalendarBtn) openCalendarBtn.classList.remove('bg-blue-600');
                if (openCalendarBtn) openCalendarBtn.classList.add('bg-gray-700');
            }
        }

        function updateOwnerFilterButtons() {
            if (liberacaoOwnerFilter === 'my') {
                filterMyLiberacoesBtn.classList.remove('bg-gray-700', 'hover:bg-gray-600');
                filterMyLiberacoesBtn.classList.add('bg-blue-600');
                filterAllLiberacoesBtn.classList.remove('bg-blue-600');
                filterAllLiberacoesBtn.classList.add('bg-gray-700', 'hover:bg-gray-600');
            } else { // 'all'
                filterAllLiberacoesBtn.classList.remove('bg-gray-700', 'hover:bg-gray-600');
                filterAllLiberacoesBtn.classList.add('bg-blue-600');
                filterMyLiberacoesBtn.classList.remove('bg-blue-600');
                filterMyLiberacoesBtn.classList.add('bg-gray-700', 'hover:bg-gray-600');
            }
        }

        // Função para buscar e exibir as liberações com filtros
        async function fetchLiberacoes(session, filterType = 'date', date = null, searchTerm = null) {
            updateFilterButtons(filterType);
            updateOwnerFilterButtons();
            currentFilterType = filterType;
            currentFilterDate = date;

            let query = supabase
                .from('liberacoes')
                .select('*');

            if (liberacaoOwnerFilter === 'my') {
                query = query.eq('user_id', session.user.id);
            }

            if (filterType === 'date' && date) {
                // Lógica de filtro corrigida: verifica se a data selecionada está entre o início e o fim
                query = query.or(`permanente.eq.true,and(periodo_inicio.lte.${date},periodo_fim.gte.${date})`);
            }
            
            query = query.order('created_at', { ascending: false });

            const { data, error } = await query;

            if (error) {
                console.error('Erro ao buscar liberações:', error);
                return;
            }
            
            let filteredData = data;
            if (searchTerm && searchTerm.trim() !== '') {
                const normalizedSearchTerm = normalizeText(searchTerm);
                filteredData = data.filter(liberacao => {
                    let nomeToSearch = liberacao.nome;
                    if (typeof nomeToSearch === 'string' && nomeToSearch.startsWith('[') && nomeToSearch.endsWith(']')) {
                        try {
                            const parsed = JSON.parse(nomeToSearch);
                            if (Array.isArray(parsed)) {
                                nomeToSearch = parsed.join(' ');
                            }
                        } catch (e) {
                            // Ignorar erro de parse
                        }
                    } else if (Array.isArray(nomeToSearch)) {
                        nomeToSearch = nomeToSearch.join(' ');
                    }
                    // Adiciona a observação ao filtro de pesquisa
                    return normalizeText(nomeToSearch).includes(normalizedSearchTerm) || normalizeText(liberacao.observacao || '').includes(normalizedSearchTerm);
                });
            }

            if (liberacoesList) {
                liberacoesList.innerHTML = ''; // Limpa a lista antes de renderizar
                
                // Adiciona o título do filtro
                if (liberacaoHeaderFixed) {
                    if (filterType === 'date' && date) {
                        liberacaoHeaderFixed.textContent = new Date(date + 'T00:00:00').toLocaleDateString('pt-br');
                    } else {
                        liberacaoHeaderFixed.textContent = 'Todas as datas';
                    }
                }
    
                if (filteredData && filteredData.length > 0) {
                    filteredData.forEach(liberacao => {
                        const cardClasses = `p-4 rounded-lg shadow-lg transition-all duration-300 ${liberacao.concluida ? 'bg-emerald-800' : 'bg-gray-700'}`;
                        const importantIcon = liberacao.importante
                            ? `<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-yellow-400 mr-2 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.487 0l5.58 9.92c.754 1.346-.245 3.06-1.745 3.06H4.42c-1.5 0-2.498-1.714-1.746-3.06l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>`
                            : '';
                            
                        const liberacaoCard = document.createElement('div');
                        liberacaoCard.className = cardClasses;
                        
                        const actionsContainer = document.createElement('div');
                        actionsContainer.className = 'flex items-center space-x-2';
                        
                        // Apenas mostra os botões de ação se o usuário for o criador
                        if (session.user.id === liberacao.user_id) {
                            const editButton = document.createElement('button');
                            editButton.className = 'text-blue-400 hover:text-blue-500 transition duration-200';
                            editButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zm-4.646 2.586l2.828 2.828-5.756 5.757a4 4 0 01-1.328 1.03l-1.35 1.35-.793-.793 1.35-1.35c.376-.376.694-.852 1.03-1.328l5.756-5.757z" />
                                    </svg>`;
                            editButton.onclick = () => editLiberacao(liberacao.id);
                            actionsContainer.appendChild(editButton);

                            const deleteButton = document.createElement('button');
                            deleteButton.className = 'text-red-400 hover:text-red-500 transition duration-200';
                            deleteButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.03 21H7.97a2 2 0 01-1.99-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>`;
                            deleteButton.onclick = () => deleteLiberacao(liberacao.id);
                            actionsContainer.appendChild(deleteButton);

                            if (liberacao.concluida) {
                                const desconcluirButton = document.createElement('button');
                                desconcluirButton.className = 'text-red-400 hover:text-red-500 transition duration-200';
                                desconcluirButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>`;
                                desconcluirButton.onclick = () => desmarcarComoConcluida(liberacao.id);
                                actionsContainer.appendChild(desconcluirButton);
                            } else {
                                const concluirButton = document.createElement('button');
                                concluirButton.className = 'text-emerald-400 hover:text-emerald-500 transition duration-200';
                                concluirButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                        </svg>`;
                                concluirButton.onclick = () => marcarComoConcluida(liberacao.id);
                                actionsContainer.appendChild(concluirButton);
                            }
                        }

                        // Formata as datas para dd/mm/aaaa
                        const periodoInicioFormatado = liberacao.periodo_inicio ? new Date(liberacao.periodo_inicio + 'T00:00:00').toLocaleDateString('pt-br') : '';
                        const periodoFimFormatado = liberacao.periodo_fim ? new Date(liberacao.periodo_fim + 'T00:00:00').toLocaleDateString('pt-br') : '';
    
                        let nomesParaExibir = liberacao.nome;
                        if (typeof nomesParaExibir === 'string' && nomesParaExibir.startsWith('[') && nomesParaExibir.endsWith(']')) {
                            try {
                                nomesParaExibir = JSON.parse(nomesParaExibir);
                            } catch (e) {
                                // Ignorar erro de parse
                            }
                        }
                        const nomeParaExibirFinal = Array.isArray(nomesParaExibir) ? nomesParaExibir.join(', ') : nomesParaExibir;
    
                        const observacaoParaExibir = liberacao.observacao || '';

                        // Formata e destaca o texto
                        const formattedNome = nomeParaExibirFinal;
                        const formattedObservacao = formatText(observacaoParaExibir);
                        const finalNomeHTML = highlightText(formattedNome, searchTerm);
                        const finalObservacaoHTML = highlightText(formattedObservacao, searchTerm);
    
                        const detailsContainer = document.createElement('div');
                        detailsContainer.innerHTML = `
                            <p class="text-sm text-gray-400">
                                Período: ${liberacao.permanente ? 'Permanente' : `${periodoInicioFormatado} a ${periodoFimFormatado}`}
                            </p>
                            ${observacaoParaExibir ? `<p class="text-sm text-gray-400 mt-2">Observação: <span class="text-white">${finalObservacaoHTML}</span></p>` : ''}
                            <p class="text-sm text-gray-400 mt-2">Criado por: ${liberacao.criador_nome} em ${new Date(liberacao.created_at).toLocaleString('pt-br')}</p>
                            ${liberacao.concluida ? `<p class="text-sm text-gray-400 mt-2">Concluído por: ${liberacao.concluida_por} em ${new Date(liberacao.concluida_em).toLocaleString('pt-br')}</p>` : ''}
                            ${liberacao.anexo_url ? `<a href="${liberacao.anexo_url}" target="_blank" class="text-sm text-blue-400 hover:underline">Ver Anexo</a>` : ''}
                        `;
                        
                        const headerContainer = document.createElement('div');
                        headerContainer.className = 'flex items-center justify-between';
                        headerContainer.innerHTML = `
                            <div class="flex items-center">
                                ${importantIcon}
                                <h3 class="font-bold text-gray-100">${finalNomeHTML}</h3>
                            </div>
                        `;
                        headerContainer.appendChild(actionsContainer);
    
                        liberacaoCard.appendChild(headerContainer);
                        liberacaoCard.appendChild(detailsContainer);
                        liberacoesList.appendChild(liberacaoCard);
                    });
                } else {
                    liberacoesList.innerHTML = `<p class="text-center text-gray-500">Nenhuma liberação encontrada.</p>`;
                }
            }
        }

        // Adiciona listeners para os botões e input de filtro
        if (openCalendarBtn) {
            openCalendarBtn.addEventListener('click', () => {
                 if (customCalendarModal) customCalendarModal.style.display = 'flex';
                 // Sincroniza a data do filtro atual com o input do modal
                 customDateInput.value = currentFilterDate;
            });
        }

        if (customDateInput) {
            customDateInput.addEventListener('change', (event) => {
                 const selectedDate = event.target.value;
                 if (selectedDate) {
                    fetchLiberacoes(currentSession, 'date', selectedDate, searchInput.value);
                 }
                 if (customCalendarModal) customCalendarModal.style.display = 'none';
            });
        }
        
        if (selectTodayBtn) {
            selectTodayBtn.addEventListener('click', () => {
                 const today = new Date().toISOString().split('T')[0];
                 fetchLiberacoes(currentSession, 'date', today, searchInput.value);
                 currentFilterDate = today;
                 customDateInput.value = today;
                 if (customCalendarModal) customCalendarModal.style.display = 'none';
            });
        }

        if (selectAllDatesBtn) {
            selectAllDatesBtn.addEventListener('click', () => {
                 fetchLiberacoes(currentSession, 'all', null, searchInput.value);
                 currentFilterType = 'all';
                 currentFilterDate = null;
                 customDateInput.value = '';
                 if (customCalendarModal) customCalendarModal.style.display = 'none';
            });
        }
        
        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', () => {
                if (searchInput) searchInput.value = '';
                if (currentSession) {
                    fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, '');
                }
            });
        }
        
        if (searchInput) {
            searchInput.addEventListener('input', (event) => {
                clearTimeout(searchTimeout);
                // Define o filtro para "todas" quando o usuário começar a pesquisar
                currentFilterType = 'all';
                currentFilterDate = null;
                updateFilterButtons('all');

                searchTimeout = setTimeout(() => {
                    if (currentSession) {
                        fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, event.target.value);
                    }
                }, 500); // 500ms de atraso
            });
        }
        
        if (filterMyLiberacoesBtn) {
            filterMyLiberacoesBtn.addEventListener('click', () => {
                liberacaoOwnerFilter = 'my';
                fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
            });
        }
        if (filterAllLiberacoesBtn) {
            filterAllLiberacoesBtn.addEventListener('click', () => {
                liberacaoOwnerFilter = 'all';
                fetchLiberacoes(currentSession, currentFilterType, currentFilterDate, searchInput.value);
            });
        }

        // Função para definir a data inicial e buscar as liberações
        function setInitialDateAndFetch() {
            const today = new Date().toISOString().split('T')[0];
            if(filterDateInput) filterDateInput.value = today;
            updateFilterButtons('date');
            if (currentSession) {
                fetchLiberacoes(currentSession, 'date', today);
            }
        }

        // Lógica para verificar a URL imediatamente e definir a sessão
        const handleAuthCallback = async () => {
            const hash = window.location.hash;
            if (hash.includes('access_token')) {
                const params = new URLSearchParams(hash.substring(1));
                const accessToken = params.get('access_token');
                const refreshToken = params.get('refresh_token');
                const type = params.get('type');

                // Se for um link de redefinição de senha, exibe o formulário de atualização de senha
                if (type === 'recovery' && authContainer) {
                    authContainer.style.display = 'none';
                    if (passwordRecoveryContainer) passwordRecoveryContainer.style.display = 'flex';
                    if (accessControlTitle) {
                        accessControlTitle.style.opacity = '0';
                        accessControlTitle.style.pointerEvents = 'none';
                    }
                }

                if (accessToken && refreshToken) {
                    try {
                        const { data, error } = await supabase.auth.setSession({
                            access_token: accessToken,
                            refresh_token: refreshToken,
                        });
                        if (error) {
                            console.error('Erro ao definir a sessão:', error);
                        } else {
                            console.log('Sessão definida com sucesso:', data);
                        }
                    } catch (err) {
                        console.error('Erro ao processar tokens da URL:', err);
                    } finally {
                         // Adiciona o redirecionamento para a página de login
                         window.location.href = window.location.origin;
                    }
                }
            }
        };

        // Chama a função de tratamento de URL ao carregar o script
        handleAuthCallback();

        // Listener de estado de autenticação do Supabase
        supabase.auth.onAuthStateChange(async (event, session) => {
            console.log('Evento de autenticação:', event);
            currentSession = session;

            if (event === 'SIGNED_OUT') {
                if (backgroundBlurContainer) backgroundBlurContainer.style.display = 'block';
                if (authContainer) authContainer.style.display = 'block';
                if (liberacaoPage) liberacaoPage.style.display = 'none';
                if (accessControlTitle) {
                    accessControlTitle.style.opacity = '1';
                    accessControlTitle.style.pointerEvents = 'auto';
                }
                window.location.reload(); // Recarrega a página após o logout
            } else if (session) {
                if (isChangingPassword) return; // Se estiver trocando a senha, não exibe a área logada

                // Se a página de recuperação de senha estiver visível, não muda o display
                if (passwordRecoveryContainer && passwordRecoveryContainer.style.display === 'flex') {
                    return;
                }
                
                if (backgroundBlurContainer) backgroundBlurContainer.style.display = 'none';
                if (authContainer) authContainer.style.display = 'none';
                if (liberacaoPage) liberacaoPage.style.display = 'flex'; // Exibe a página de liberações

                if (accessControlTitle) {
                    accessControlTitle.style.opacity = '0'; // Esconde o título
                    accessControlTitle.style.pointerEvents = 'none'; // Impede interação
                }

                adjustLiberacaoLayout();
                setInitialDateAndFetch(); // Busca os dados de liberação automaticamente
                
            } else {
                // Usuário deslogado, mas não pelo evento SIGNED_OUT
                if (backgroundBlurContainer) backgroundBlurContainer.style.display = 'block';
                if (authContainer) authContainer.style.display = 'block';
                if (liberacaoPage) liberacaoPage.style.display = 'none';
                if (accessControlTitle) {
                    accessControlTitle.style.opacity = '1'; // Mostra o título
                    accessControlTitle.style.pointerEvents = 'auto'; // Habilita interação
                }
                showMessage(''); // Limpa a mensagem ao mudar de estado
            }
        });
        
        //Lógica para deslogar
        if (signOutLiberacaoBtn) {
            signOutLiberacaoBtn.addEventListener('click', async () => {
                const { error } = await supabase.auth.signOut();
                if (error) {
                    showMessage('Erro ao sair.', true);
                }
            });
        }
    </script>
</body>
</html>



